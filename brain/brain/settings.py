"""
Django settings for brain project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import sys
from datetime import timedelta
from email.utils import getaddresses
from pathlib import Path

from django.contrib.messages import constants as messages

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
env.read_env(str(BASE_DIR / '.env'))

sys.path.append(str(BASE_DIR / 'apps'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


def _account_user_display(user):
    return user.display_name


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-9ik1gafe*h671^bzgs_-%(mi016cw6j%d4z)rt5eaeray)3g*p')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', False)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])

INTERNAL_IPS = env.list('INTERNAL_IPS', default=['127.0.0.1'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.humanize',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django_celery_results',
    'django_celery_beat',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'imagekit',
    'django_countries',
    'polymorphic',
    'import_export',
    'compressor',
    'crispy_forms',
    'crispy_bootstrap5',
    'widget_tweaks',
    'el_pagination',
    'rangefilter',
    'oauth2_provider',
    'rest_framework',
    'django_filters',
    'markdownify',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'django_mailbox',
    'social_django',
    'common',
    'users',
    'locations',
    'companies',
    'socialgraph',
    'library',
    'deals',
    'dual_use',
    'debug_toolbar',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'brain.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'brain.context_processors.site',
            ],
        },
    },
]

WSGI_APPLICATION = 'brain.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env('DATABASE_ENGINE', default='django.db.backends.postgresql'),
        'NAME': env('DATABASE_NAME', default='aindex'),
        'USER': env('DATABASE_USER', default='aindex'),
        'PASSWORD': env('DATABASE_PASSWORD', default='aindex'),
        'HOST': env('DATABASE_HOST', default='127.0.0.1'),
        'PORT': env('DATABASE_PORT', default='5432'),
        'CONN_MAX_AGE': env.int('DATABASE_CONN_MAX_AGE', default=0),
        'ATOMIC_REQUESTS': env.bool('DATABASE_ATOMIC_REQUESTS', default=True),
    }
}

# Auth

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'social_core.backends.google.GoogleOAuth2',  # social auth for mailbox
]

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': env.list(
            'SOCIALACCOUNT_GOOGLE_SCOPE',
            default=[
                'profile',
                'email',
            ],
        ),
        'AUTH_PARAMS': {
            'access_type': env('SOCIALACCOUNT_GOOGLE_ACCESS_TYPE', default='online'),
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}

sa_google_client_id = env('SOCIALACCOUNT_GOOGLE_CLIENT_ID', default='')
sa_google_client_secret = env('SOCIALACCOUNT_GOOGLE_CLIENT_SECRET', default='')
if sa_google_client_id and sa_google_client_secret:
    SOCIALACCOUNT_PROVIDERS['google']['APP'] = {
        'client_id': sa_google_client_id,
        'secret': sa_google_client_secret,
        'key': '',
    }

SOCIALACCOUNT_STORE_TOKENS = env.bool('SOCIALACCOUNT_STORE_TOKENS', default=False)

LOGIN_REDIRECT_URL = env('LOGIN_REDIRECT_URL', default='/')

ACCOUNT_USER_DISPLAY = _account_user_display

ACCOUNT_DEFAULT_HTTP_PROTOCOL = env('ACCOUNT_DEFAULT_HTTP_PROTOCOL', default='https')

# Social auth settings
# Used because django mailbox doesn't support allauth yet.
# https://github.com/coddingtonbear/django-mailbox/issues/231

SOCIAL_AUTH_JSONFIELD_ENABLED = True

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY', default='')

SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET', default='')

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = env('LANGUAGE_CODE', default='en-us')

TIME_ZONE = env('TIME_ZONE', default='America/New_York')

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_DIRS = env.list('STATICFILES_DIRS', default=[BASE_DIR / 'static', BASE_DIR / 'assets/dist'])

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

STATIC_URL = env('STATIC_URL', default='/static/')

STATIC_ROOT = env('STATIC_ROOT', default=(BASE_DIR / 'static_root'))

MEDIA_URL = env('MEDIA_URL', default='/media/')

MEDIA_ROOT = env('MEDIA_ROOT', default=(BASE_DIR / 'media_root'))

COMPRESS_ENABLED = env.bool('COMPRESS_ENABLED', default=(not DEBUG))

COMPRESS_URL = env('COMPRESS_URL', default=STATIC_URL)

STORAGES = {
    'default': {
        'BACKEND': env('DEFAULT_FILE_STORAGE', default='django.core.files.storage.FileSystemStorage'),
        'OPTIONS': {},
    },
    'staticfiles': {
        'BACKEND': env('STATICFILES_STORAGE', default='django.contrib.staticfiles.storage.StaticFilesStorage'),
        'OPTIONS': {},
    },
    'library': {
        'BACKEND': env('LIBRARY_FILE_STORAGE', default='django.core.files.storage.FileSystemStorage'),
        'OPTIONS': {},
    },
    'decks': {
        'BACKEND': env('DECKS_FILE_STORAGE', default='django.core.files.storage.FileSystemStorage'),
        'OPTIONS': {},
    },
}

if STORAGES['default']['BACKEND'] == 'storages.backends.gcloud.GoogleCloudStorage':
    STORAGES['default']['OPTIONS']['bucket_name'] = env('GS_BUCKET_NAME')
    STORAGES['default']['OPTIONS']['location'] = env('GS_LOCATION', default='')
    STORAGES['default']['OPTIONS']['default_acl'] = env('GS_DEFAULT_ACL', default=None)
    STORAGES['default']['OPTIONS']['querystring_auth'] = env.bool('GS_QUERYSTRING_AUTH', default=True)

    _GS_EXPIRATION = env.int('GS_EXPIRATION', default=86400)
    STORAGES['default']['OPTIONS']['expiration'] = timedelta(seconds=_GS_EXPIRATION)

if STORAGES['staticfiles']['BACKEND'] == 'storages.backends.gcloud.GoogleCloudStorage':
    STORAGES['staticfiles']['OPTIONS']['bucket_name'] = env('STATICFILES_GS_BUCKET_NAME')
    STORAGES['staticfiles']['OPTIONS']['location'] = env('STATICFILES_GS_LOCATION', default='')
    STORAGES['staticfiles']['OPTIONS']['default_acl'] = env('STATICFILES_GS_DEFAULT_ACL', default=None)
    STORAGES['staticfiles']['OPTIONS']['querystring_auth'] = env.bool('STATICFILES_GS_QUERYSTRING_AUTH', default=True)

    _STATICFILES_GS_EXPIRATION = env.int('STATICFILES_GS_EXPIRATION', default=86400)
    STORAGES['staticfiles']['OPTIONS']['expiration'] = timedelta(seconds=_STATICFILES_GS_EXPIRATION)

if STORAGES['library']['BACKEND'] == 'storages.backends.gcloud.GoogleCloudStorage':
    STORAGES['library']['OPTIONS']['bucket_name'] = env('LIBRARY_GS_BUCKET_NAME')
    STORAGES['library']['OPTIONS']['location'] = env('LIBRARY_GS_LOCATION', default='')
    STORAGES['library']['OPTIONS']['default_acl'] = env('LIBRARY_GS_DEFAULT_ACL', default=None)
    STORAGES['library']['OPTIONS']['querystring_auth'] = env.bool('LIBRARY_GS_QUERYSTRING_AUTH', default=True)

    _LIBRARY_GS_EXPIRATION = env.int('LIBRARY_GS_EXPIRATION', default=86400)
    STORAGES['library']['OPTIONS']['expiration'] = timedelta(seconds=_LIBRARY_GS_EXPIRATION)

if STORAGES['decks']['BACKEND'] == 'storages.backends.gcloud.GoogleCloudStorage':
    STORAGES['decks']['OPTIONS']['bucket_name'] = env('DECKS_GS_BUCKET_NAME')
    STORAGES['decks']['OPTIONS']['location'] = env('DECKS_GS_LOCATION', default='')
    STORAGES['decks']['OPTIONS']['default_acl'] = env('DECKS_GS_DEFAULT_ACL', default=None)
    STORAGES['decks']['OPTIONS']['querystring_auth'] = env.bool('DECKS_GS_QUERYSTRING_AUTH', default=True)

    _DECKS_GS_EXPIRATION = env.int('DECKS_GS_EXPIRATION', default=86400)
    STORAGES['decks']['OPTIONS']['expiration'] = timedelta(seconds=_DECKS_GS_EXPIRATION)


# The maximum size (in bytes) that an upload will be before it gets streamed to the file system
# https://docs.djangoproject.com/en/5.0/ref/settings/#std-setting-FILE_UPLOAD_MAX_MEMORY_SIZE
FILE_UPLOAD_MAX_MEMORY_SIZE = env('FILE_UPLOAD_MAX_MEMORY_SIZE', default=5242880)  # default ~5MB

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Site

SITE_ID = env.int('SITE_ID', default=1)

SITE_NAME = env('SITE_NAME', default='brAIN')

SITE_URL = env('SITE_URL', default='https://aindex.ainventures.com')

SITE_API_NAME = env('SITE_API_NAME', default=f'{SITE_NAME} API')

# Admin site

ADMIN_SITE_NAME = env('ADMIN_SITE_HEADER', default=SITE_NAME)

ADMIN_SITE_HEADER = env('ADMIN_SITE_HEADER', default=SITE_NAME)

ADMIN_INDEX_TITLE = env('ADMIN_INDEX_TITLE', default='Backstage')

GOOGLE_ANALYTICS_ID = env('GOOGLE_ANALYTICS_ID', default='')

GOOGLE_SITE_VERIFICATION = env('GOOGLE_SITE_VERIFICATION', default='')

# Email

EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)

EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')

EMAIL_FILE_PATH = env('EMAIL_FILE_PATH', default=None)

EMAIL_HOST = env('EMAIL_HOST', default='localhost')

EMAIL_PORT = env.int('EMAIL_PORT', default=25)

EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')

EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')

EMAIL_TIMEOUT = env.int('EMAIL_TIMEOUT', default=30)

DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='')

SERVER_EMAIL = env('SERVER_EMAIL', default='')

ADMINS = getaddresses([env('ADMINS', default='')])

# SSL & Security middleware

if env('SECURE_PROXY_SSL_HEADER', default=None):
    SECURE_PROXY_SSL_HEADER = env('SECURE_PROXY_SSL_HEADER').split()[:2]

if env('SECURE_SSL_REDIRECT', default=None):
    SECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT')

if env('CSRF_COOKIE_SECURE', default=None):
    CSRF_COOKIE_SECURE = env.bool('CSRF_COOKIE_SECURE')

CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])

if env('SECURE_HSTS_SECONDS', default=None):
    SECURE_HSTS_SECONDS = env.int('SECURE_HSTS_SECONDS')

SECURE_REFERRER_POLICY = env('SECURE_REFERRER_POLICY', default='strict-origin-when-cross-origin')

# Crispy forms

CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'

CRISPY_TEMPLATE_PACK = 'bootstrap5'

# pagination

EL_PAGINATION_PER_PAGE = env.int('EL_PAGINATION_PER_PAGE', default=30)

# Countries

COUNTRIES_FIRST = ['US', 'CA', 'GB', 'DE', 'FR']

# celery

CELERY_TIMEZONE = env('CELERY_TIMEZONE', default=TIME_ZONE)

CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='amqp://')

CELERY_BROKER_CONNECTION_MAX_RETRIES = env.int('CELERY_BROKER_CONNECTION_MAX_RETRIES', default=5)

CELERY_ACCEPT_CONTENT = env.list('CELERY_ACCEPT_CONTENT', default=['json'])

CELERY_TASK_SERIALIZER = env('CELERY_TASK_SERIALIZER', default='json')

CELERY_RESULT_SERIALIZER = env('CELERY_RESULT_SERIALIZER', default='json')

CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='django-db')

CELERY_RESULT_EXTENDED = env.bool('CELERY_RESULT_EXTENDED', default=True)

# https://docs.celeryq.dev/en/v5.4.0/userguide/configuration.html#result-expires
CELERY_RESULT_EXPIRES = env.int('CELERY_RESULT_EXPIRES', default=60 * 60 * 24 * 30)  # defaults 1 month

CELERY_TASK_TRACK_STARTED = env.bool('CELERY_TASK_TRACK_STARTED', default=True)

CELERY_BEAT_SCHEDULER = env('CELERY_BEAT_SCHEDULER', default='django_celery_beat.schedulers:DatabaseScheduler')

CELERY_FLOWER_BASIC_AUTH = env('CELERY_FLOWER_BASIC_AUTH', default=None)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'oauth2_provider.contrib.rest_framework.IsAuthenticatedOrTokenHasScope',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': env('API_PAGE_SIZE', default=30),
    'SEARCH_PARAM': env('SEARCH_PARAM', default='q'),
    'ORDERING_PARAM': env('ORDERING_PARAM', default='sort'),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': SITE_API_NAME,
    'DESCRIPTION': '',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SERVE_PUBLIC': False,
    'SERVERS': [
        {
            'url': '/api',
            'description': SITE_API_NAME,
        },
    ],
    'SCHEMA_PATH_PREFIX': '/api',
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'REDOC_DIST': 'SIDECAR',
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
}

APPEND_SLASH = env.bool('APPEND_SLASH', default=False)

# Markdownify

MARKDOWNIFY = {
    "default": {
        "WHITELIST_TAGS": ['a', 'abbr', 'acronym', 'b', 'blockquote', 'em', 'i', 'li', 'ol', 'p', 'strong', 'ul']
    }
}

AFFINITY_DEALS_LIST_ID = env.int('AFFINITY_DEALS_LIST_ID', default=135493)
AFFINITY_DEALS_LIST_FIELD_ID = env.int('AFFINITY_DEALS_LIST_FIELD_ID', default=2265085)
AFFINITY_DEALS_LIST_FIELD_STATUS_ID = env.int('AFFINITY_DEALS_LIST_FIELD_STATUS_ID', default=11344543)

CORESIGNAL_DEFAULT_SEARCH_LOCATION = env('CORESIGNAL_DEFAULT_SEARCH_LOCATION', default='United States')

# Librarain

LIBRARAIN_EMBEDDING_DIMENSIONS = env('LIBRARAIN_EMBEDDING_DIMENSIONS', default=768)


# Messages

MESSAGE_TAGS = {
    messages.DEBUG: 'debug text-bg-dark',
    messages.INFO: 'info text-bg-secondary',
    messages.SUCCESS: 'success text-bg-light',
    messages.WARNING: 'warning text-bg-warning',
    messages.ERROR: 'error text-bg-danger',
}

# Logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'console_debug_false': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'console_debug_false', 'mail_admins'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
