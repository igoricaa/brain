# Generated by Django 5.2.4 on 2025-07-10 16:49

import django.contrib.postgres.fields
import django.db.models.deletion
import django.db.models.functions.datetime
import pgvector.django.vector
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('library', '0001_initial'),
        ('socialgraph', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PaperAuthor',
            fields=[
                (
                    'profile_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='socialgraph.profile',
                    ),
                ),
                (
                    'semantic_scholar_id',
                    models.SlugField(blank=True, null=True, unique=True, verbose_name='semantic scholar ID'),
                ),
                (
                    'arxiv_id',
                    models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='arXiv ID'),
                ),
                ('citation_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='citation count')),
                ('paper_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='paper count')),
                ('h_index', models.PositiveIntegerField(blank=True, null=True, verbose_name='h-index')),
                (
                    'affiliations',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='affiliations',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Paper Author',
                'verbose_name_plural': 'Papers Authors',
            },
            bases=('socialgraph.profile',),
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('code', models.SlugField(blank=True, unique=True, verbose_name='code')),
                ('website', models.URLField(blank=True, verbose_name='website URL')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_default=django.db.models.functions.datetime.Now(),
                        verbose_name='created at',
                    ),
                ),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated at')),
                ('extras', models.JSONField(blank=True, default=dict, verbose_name='extras')),
            ],
            options={
                'verbose_name': 'Source',
                'verbose_name_plural': 'Sources',
            },
        ),
        migrations.AddField(
            model_name='file',
            name='categories',
            field=models.ManyToManyField(
                blank=True,
                related_name='document',
                related_query_name='documents',
                to='library.category',
                verbose_name='categories',
            ),
        ),
        migrations.AddField(
            model_name='file',
            name='creator',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='created_library_files',
                related_query_name='created_library_file',
                to=settings.AUTH_USER_MODEL,
                verbose_name='creator',
            ),
        ),
        migrations.AddField(
            model_name='file',
            name='polymorphic_ctype',
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='polymorphic_%(app_label)s.%(class)s_set+',
                to='contenttypes.contenttype',
            ),
        ),
        migrations.CreateModel(
            name='SemanticScholarSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                (
                    'query',
                    models.CharField(
                        help_text='A plain-text search query string. No special query syntax is supported. Hyphenated query terms yield no matches (replace it with space to find matches.)',
                        max_length=255,
                        verbose_name='query',
                    ),
                ),
                (
                    'publication_types',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='publication types',
                    ),
                ),
                (
                    'fields_of_study',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=128),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='fields of study',
                    ),
                ),
                (
                    'open_access_pdf',
                    models.BooleanField(
                        default=True,
                        help_text='Restricts results to only include papers with a public PDF.',
                        verbose_name='open access PDF',
                    ),
                ),
                (
                    'min_citation_count',
                    models.PositiveIntegerField(
                        blank=True,
                        help_text='Restricts results to only include papers with the minimum number of citations',
                        null=True,
                        verbose_name='minimum citations',
                    ),
                ),
                (
                    'publication_date',
                    models.CharField(
                        blank=True,
                        help_text='Restricts results to the given range of publication dates or years (inclusive). Accepts the format <startDate>:<endDate> with each date in YYYY-MM-DD format. Partial dates including year or year and month only, exact dates and open ended ranges are also supported.',
                        max_length=50,
                        verbose_name='publication date range',
                    ),
                ),
                (
                    'year',
                    models.CharField(
                        blank=True,
                        help_text='Restricts results to the given publication year or range of years (inclusive). Examples: `2019` in 2019; `2016-2020` as early as 2016 or as late as 2020; `2010-` during or after 2010; `-2015` before or during 2015',
                        max_length=50,
                        verbose_name='year',
                    ),
                ),
                (
                    'venue',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=128),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='venue',
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_default=django.db.models.functions.datetime.Now(),
                        verbose_name='created at',
                    ),
                ),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated at')),
                ('extras', models.JSONField(blank=True, default=dict, verbose_name='extras')),
                (
                    'source',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='semantic_scholar_searches',
                        related_query_name='semantic_scholar_search',
                        to='library.source',
                        verbose_name='source',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Semantic Scholar Search',
                'verbose_name_plural': 'Semantic Scholar Searches',
            },
        ),
        migrations.AddField(
            model_name='file',
            name='source',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='document',
                related_query_name='documents',
                to='library.source',
                verbose_name='source',
            ),
        ),
        migrations.AddField(
            model_name='arxivsearch',
            name='source',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='arxiv_searches',
                related_query_name='arxiv_search',
                to='library.source',
                verbose_name='source',
            ),
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                (
                    'file_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='library.file',
                    ),
                ),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('abstract', models.TextField(blank=True, verbose_name='abstract')),
                ('text', models.TextField(blank=True, verbose_name='text')),
                (
                    'tldr',
                    models.TextField(
                        blank=True,
                        help_text='short summary of the paper, usually auto-generated.',
                        verbose_name='tl;dr',
                    ),
                ),
                (
                    'semantic_scholar_id',
                    models.SlugField(blank=True, null=True, unique=True, verbose_name='semantic scholar ID'),
                ),
                (
                    'arxiv_id',
                    models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='arXiv ID'),
                ),
                (
                    'publication_year',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='year published'),
                ),
                ('publication_date', models.DateField(blank=True, null=True, verbose_name='date published')),
                ('license', models.CharField(blank=True, max_length=255, verbose_name='license')),
                (
                    'embedding',
                    pgvector.django.vector.VectorField(
                        blank=True, dimensions=768, null=True, verbose_name='embedding'
                    ),
                ),
                (
                    'authors',
                    models.ManyToManyField(
                        blank=True,
                        related_name='papers',
                        related_query_name='paper',
                        to='library.paperauthor',
                        verbose_name='authors',
                    ),
                ),
                (
                    'document_types',
                    models.ManyToManyField(
                        blank=True,
                        related_name='papers',
                        related_query_name='paper',
                        to='library.documenttype',
                        verbose_name='document type',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Paper',
                'verbose_name_plural': 'Papers',
            },
            bases=('library.file',),
        ),
    ]
