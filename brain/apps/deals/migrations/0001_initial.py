# Generated by Django 5.2.4 on 2025-07-10 16:49

import django.contrib.postgres.fields
import django_countries.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                (
                    'has_veteran_founder',
                    models.BooleanField(blank=True, null=True, verbose_name='has veteran founder'),
                ),
                ('company_duns', models.IntegerField(blank=True, null=True, verbose_name='D-U-N-S number')),
                ('company_nid', models.IntegerField(blank=True, null=True, verbose_name='Company NID')),
                ('address_line_1', models.CharField(blank=True, max_length=255, verbose_name='address line 1')),
                ('address_line_2', models.CharField(blank=True, max_length=255, verbose_name='address line 2')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='country')),
                ('city', models.CharField(blank=True, max_length=255, verbose_name='city')),
                ('state', models.CharField(blank=True, max_length=255, verbose_name='state')),
                ('postal_code', models.CharField(blank=True, max_length=255, verbose_name='postal/zip code')),
                (
                    'stage',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('pre-seed', 'pre-seed'),
                            ('seed', 'seed'),
                            ('seed+', 'seed+'),
                            ('series-a', 'series A'),
                            ('series-b', 'series B'),
                            ('series-c', 'series C'),
                            ('beyond-series-c', 'beyond series C'),
                        ],
                        max_length=255,
                        verbose_name='stage',
                    ),
                ),
                (
                    'funding_target',
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='funding target (USD)'
                    ),
                ),
                (
                    'funding_raised',
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='funding raised (USD)'
                    ),
                ),
                (
                    'investors_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='investor names',
                    ),
                ),
                (
                    'partners_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='partners names',
                    ),
                ),
                (
                    'customers_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='customers names',
                    ),
                ),
                ('sent_to_affinity', models.BooleanField(blank=True, null=True, verbose_name='sent to affinity')),
                (
                    'affinity_organization_id',
                    models.IntegerField(blank=True, null=True, verbose_name='affinity organization ID'),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated at')),
                ('pros', models.TextField(blank=True, verbose_name='pros')),
                ('cons', models.TextField(blank=True, verbose_name='cons')),
                (
                    'quality_percentile',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('top 1%', 'most interesting'),
                            ('top 5%', 'very interesting'),
                            ('top 10%', 'interesting'),
                            ('top 20%', 'potentially interesting'),
                            ('top 50%', 'not interesting'),
                        ],
                        max_length=50,
                        verbose_name='quality percentile',
                    ),
                ),
                (
                    'recommendation',
                    models.CharField(
                        blank=True,
                        choices=[('prep to call', 'prep to call'), ('prep to pass', 'prep to pass')],
                        max_length=50,
                        verbose_name='recommendation',
                    ),
                ),
                ('investment_rationale', models.TextField(blank=True, verbose_name='investment rationale')),
                ('problem', models.TextField(blank=True, verbose_name='problem')),
                ('solution', models.TextField(blank=True, verbose_name='product/solution')),
                ('thesis_fit', models.TextField(blank=True, verbose_name='thesis fit')),
                ('traction', models.TextField(blank=True, verbose_name='traction')),
                ('intellectual_property', models.TextField(blank=True, verbose_name='intellectual property')),
                ('business_model', models.TextField(blank=True, verbose_name='business model')),
                ('market_sizing', models.TextField(blank=True, verbose_name='market sizing')),
                ('competition', models.TextField(blank=True, verbose_name='competition')),
                ('auto_pros', models.TextField(blank=True, verbose_name='pros (automated)')),
                ('auto_cons', models.TextField(blank=True, verbose_name='cons (automated)')),
                (
                    'auto_recommendation',
                    models.CharField(
                        blank=True,
                        choices=[('prep to call', 'prep to call'), ('prep to pass', 'prep to pass')],
                        max_length=50,
                        verbose_name='recommendation (automated)',
                    ),
                ),
                (
                    'auto_quality_percentile',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('top 1%', 'most interesting'),
                            ('top 5%', 'very interesting'),
                            ('top 10%', 'interesting'),
                            ('top 20%', 'potentially interesting'),
                            ('top 50%', 'not interesting'),
                        ],
                        max_length=50,
                        verbose_name='quality percentile (automated)',
                    ),
                ),
                (
                    'auto_numeric_score',
                    models.FloatField(blank=True, null=True, verbose_name='numeric score (automated)'),
                ),
                (
                    'auto_non_numeric_score',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('excellent', 'Excellent'),
                            ('good', 'Good'),
                            ('average', 'Average'),
                            ('below average', 'Below average'),
                        ],
                        max_length=50,
                        verbose_name='non numeric score (automated)',
                    ),
                ),
                (
                    'auto_confidence',
                    models.CharField(
                        blank=True,
                        choices=[('high', 'High'), ('low', 'Low')],
                        max_length=50,
                        verbose_name='confidence (automated)',
                    ),
                ),
                (
                    'auto_investment_rationale',
                    models.TextField(blank=True, verbose_name='investment rationale (automated)'),
                ),
                ('auto_description', models.TextField(blank=True, verbose_name='description (automated)')),
                ('auto_problem', models.TextField(blank=True, verbose_name='problem (automated)')),
                ('auto_solution', models.TextField(blank=True, verbose_name='product/solution (automated)')),
                ('auto_thesis_fit', models.TextField(blank=True, verbose_name='thesis fit (automated)')),
                (
                    'auto_thesis_fit_score',
                    models.FloatField(blank=True, null=True, verbose_name='thesis fit score (automated)'),
                ),
                ('auto_traction', models.TextField(blank=True, verbose_name='traction (automated)')),
                (
                    'auto_intellectual_property',
                    models.TextField(blank=True, verbose_name='intellectual property (automated)'),
                ),
                ('auto_business_model', models.TextField(blank=True, verbose_name='business model (automated)')),
                ('auto_market_sizing', models.TextField(blank=True, verbose_name='market_sizing (automated)')),
                ('auto_competition', models.TextField(blank=True, verbose_name='competition (automated)')),
                (
                    'tags',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='tags',
                    ),
                ),
                (
                    'processing_status',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('PENDING', 'Pending'),
                            ('STARTED', 'Started processing'),
                            ('SUCCESS', 'Successful'),
                            ('FAILURE', 'Failed'),
                            ('RETRY', 'Retrying'),
                            ('REVOKED', 'Revoked'),
                        ],
                        max_length=128,
                        verbose_name='processing status',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Deal',
                'verbose_name_plural': 'Deals',
            },
        ),
    ]
