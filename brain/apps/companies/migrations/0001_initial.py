# Generated by Django 5.2.4 on 2025-07-10 16:49

import companies.storage
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.db.models.functions.datetime
import django_countries.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='ClinicalStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                (
                    'nct_id',
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text='National Clinical Trial (NCT) ID given to each clinical study upon registration at ClinicalTrials.gov',
                        max_length=255,
                        verbose_name='NCT ID',
                    ),
                ),
                ('title', models.CharField(max_length=512, verbose_name='title')),
                ('lead_sponsor_name', models.CharField(blank=True, max_length=255, verbose_name='lead sponsor name')),
                (
                    'collaborators_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='collaborators names',
                    ),
                ),
                ('description', models.TextField(blank=True, verbose_name='description')),
                (
                    'start_date_str',
                    models.CharField(blank=True, db_index=True, max_length=255, verbose_name='start date'),
                ),
                (
                    'completion_date_str',
                    models.CharField(blank=True, db_index=True, max_length=255, verbose_name='start date'),
                ),
                (
                    'status',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('ACTIVE_NOT_RECRUITING', 'Active, not recruiting'),
                            ('COMPLETED', 'Completed'),
                            ('ENROLLING_BY_INVITATION', 'Enrolling by invitation'),
                            ('NOT_YET_RECRUITING', 'Not yet recruiting'),
                            ('RECRUITING', 'Recruiting'),
                            ('SUSPENDED', 'Suspended'),
                            ('TERMINATED', 'Terminated'),
                            ('WITHDRAWN', 'Withdrawn'),
                            ('AVAILABLE', 'Available'),
                            ('NO_LONGER_AVAILABLE', 'No longer available'),
                            ('TEMPORARILY_NOT_AVAILABLE', 'Temporarily not available'),
                            ('APPROVED_FOR_MARKETING', 'Approved for marketing'),
                            ('WITHHELD', 'Withheld'),
                            ('UNKNOWN', 'Unknown status'),
                        ],
                        max_length=255,
                        verbose_name='status',
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True,
                        db_default=django.db.models.functions.datetime.Now(),
                        verbose_name='created at',
                    ),
                ),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Clinical Study',
                'verbose_name_plural': 'Clinical Studies',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('summary', models.TextField(blank=True, verbose_name='short description')),
                ('description', models.TextField(blank=True, verbose_name='full description')),
                ('website', models.URLField(blank=True, null=True, unique=True, verbose_name='website')),
                ('duns', models.IntegerField(blank=True, null=True, unique=True, verbose_name='D-U-N-S number')),
                ('nid', models.IntegerField(blank=True, null=True, unique=True, verbose_name='Company NID')),
                ('cb_uuid', models.UUIDField(blank=True, null=True, unique=True, verbose_name='crunchbase UUID')),
                ('cb_url', models.URLField(blank=True, null=True, unique=True, verbose_name='crunchbase URL')),
                ('linkedin_url', models.URLField(blank=True, verbose_name='linkedin URL')),
                ('facebook_url', models.URLField(blank=True, verbose_name='facebook URL')),
                ('twitter_url', models.URLField(blank=True, verbose_name='twitter URL')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('phone_number', models.CharField(blank=True, max_length=64, verbose_name='phone number')),
                (
                    'hq_country',
                    django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='HQ country'),
                ),
                ('hq_state_name', models.CharField(blank=True, max_length=255, verbose_name='HQ state')),
                ('hq_city_name', models.CharField(blank=True, max_length=255, verbose_name='HQ city')),
                ('hq_postal_code', models.CharField(blank=True, max_length=255, verbose_name='HQ postal/zip code')),
                (
                    'hq_regions_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=64),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='HQ regions',
                    ),
                ),
                ('address_line_1', models.CharField(blank=True, max_length=255, verbose_name='address line 1')),
                ('address_line_2', models.CharField(blank=True, max_length=255, verbose_name='address line 2')),
                (
                    'image',
                    models.ImageField(
                        blank=True, null=True, upload_to=companies.storage.company_image_path, verbose_name='image'
                    ),
                ),
                ('founded_on', models.DateField(blank=True, null=True, verbose_name='date founded')),
                (
                    'founded_on_precision',
                    models.CharField(blank=True, max_length=64, verbose_name='precision of date founded'),
                ),
                (
                    'year_founded',
                    models.PositiveIntegerField(blank=True, db_index=True, null=True, verbose_name='year founded'),
                ),
                (
                    'company_type',
                    models.CharField(
                        blank=True,
                        choices=[('for_profit', 'For Profit'), ('non_profit', 'Non-Profit')],
                        max_length=64,
                        verbose_name='company type',
                    ),
                ),
                (
                    'operating_status',
                    models.CharField(
                        blank=True,
                        choices=[('active', 'Active'), ('closed', 'Closed')],
                        max_length=64,
                        verbose_name='operating status',
                    ),
                ),
                (
                    'num_sub_organizations',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='number of sub-organizations'),
                ),
                (
                    'revenue_range',
                    django.contrib.postgres.fields.ranges.DecimalRangeField(
                        blank=True, null=True, verbose_name='estimated revenue range (USD)'
                    ),
                ),
                (
                    'exit_on',
                    models.DateField(
                        blank=True,
                        help_text='date the organization was acquired or went public',
                        null=True,
                        verbose_name='exit date',
                    ),
                ),
                (
                    'exit_on_precision',
                    models.CharField(blank=True, max_length=64, verbose_name='precision of exit date'),
                ),
                (
                    'closed_on',
                    models.DateField(
                        blank=True,
                        help_text='date when the organization is closed',
                        null=True,
                        verbose_name='closed date',
                    ),
                ),
                (
                    'closed_on_precision',
                    models.CharField(blank=True, max_length=64, verbose_name='precision of closing date'),
                ),
                (
                    'cb_industries_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='crunchbase industries',
                    ),
                ),
                (
                    'cb_industries_groups',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='crunchbase industry groups',
                    ),
                ),
                (
                    'ipo_money_raised',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        verbose_name='money raised at IPO (USD)',
                    ),
                ),
                (
                    'ipo_valuation',
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='valuation at IPO (USD)'
                    ),
                ),
                ('went_public_on', models.DateField(blank=True, null=True, verbose_name='IPO date')),
                (
                    'delisted_on',
                    models.DateField(
                        blank=True,
                        help_text='date the company was delisted from stock market',
                        null=True,
                        verbose_name='delisted on',
                    ),
                ),
                (
                    'delisted_on_precision',
                    models.CharField(blank=True, max_length=64, verbose_name='delisted date precision'),
                ),
                ('stock_symbol', models.CharField(blank=True, max_length=64, verbose_name='stock symbol')),
                ('stock_exchange_symbol', models.CharField(blank=True, max_length=64, verbose_name='stock exchange')),
                ('stock_cb_url', models.URLField(blank=True, verbose_name='stock crunchbase URL')),
                (
                    'patents_granted_count',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='number of patents granted'),
                ),
                (
                    'trademarks_count',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='number of trademarks registered'),
                ),
                (
                    'popular_patent_class',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        help_text='Most popular classes of patent across all the companies patents owned or applied for. Detected by IPqwery.',
                        size=None,
                        verbose_name='most popular patent class',
                    ),
                ),
                (
                    'popular_trademark_class',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='most popular trademark class',
                    ),
                ),
                (
                    'founders_count',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='number of founders'),
                ),
                (
                    'has_diversity_on_founders',
                    models.BooleanField(blank=True, null=True, verbose_name='has diversity on founding team'),
                ),
                (
                    'has_women_on_founders',
                    models.BooleanField(blank=True, null=True, verbose_name='women on founding team'),
                ),
                (
                    'has_black_on_founders',
                    models.BooleanField(blank=True, null=True, verbose_name='Black/African on founding team'),
                ),
                (
                    'has_hispanic_on_founders',
                    models.BooleanField(blank=True, null=True, verbose_name='Hispanic on founding team'),
                ),
                (
                    'has_asian_on_founders',
                    models.BooleanField(blank=True, null=True, verbose_name='Asian on founding team'),
                ),
                (
                    'has_meo_on_founders',
                    models.BooleanField(blank=True, null=True, verbose_name='Middle Eastern/Other on founding team'),
                ),
                (
                    'num_employees_range',
                    django.contrib.postgres.fields.ranges.IntegerRangeField(
                        blank=True, null=True, verbose_name='number of employees (range)'
                    ),
                ),
                (
                    'actively_hiring',
                    models.BooleanField(
                        blank=True,
                        help_text='Has at least one active job posting. Usually based on data from Jobbio',
                        null=True,
                        verbose_name='actively hiring',
                    ),
                ),
                ('last_layoff_date', models.DateField(blank=True, null=True, verbose_name='last layoff date')),
                (
                    'last_key_employee_change',
                    models.DateField(
                        blank=True,
                        help_text='Date company last hired executive (VP & above)',
                        null=True,
                        verbose_name='last leadership hiring date',
                    ),
                ),
                (
                    'funding_rounds_count',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='number of funding rounds'),
                ),
                ('last_funding_date', models.DateField(blank=True, null=True, verbose_name='last funding date')),
                (
                    'last_funding_amount',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        verbose_name='last funding amount (USD)',
                    ),
                ),
                (
                    'total_funding_amount',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        verbose_name='total funding amount (USD)',
                    ),
                ),
                (
                    'last_equity_funding_amount',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        verbose_name='last equity funding amount (USD)',
                    ),
                ),
                (
                    'total_equity_funding_amount',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        verbose_name='total equity funding amount (USD)',
                    ),
                ),
                (
                    'investors_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        help_text='usually includes only top investors',
                        size=None,
                        verbose_name='investors names',
                    ),
                ),
                (
                    'num_lead_investors',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='number of lead investors'),
                ),
                (
                    'num_investors',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='number of investors'),
                ),
                ('was_acquired', models.BooleanField(blank=True, null=True, verbose_name='was acquired')),
                (
                    'acquired_on',
                    models.DateField(
                        blank=True,
                        help_text='date the acquisition was announced',
                        null=True,
                        verbose_name='acquired on',
                    ),
                ),
                (
                    'acquired_on_precision',
                    models.CharField(
                        blank=True,
                        help_text='precision of date the acquisition was announced',
                        null=True,
                        verbose_name='acquired on precision',
                    ),
                ),
                (
                    'acquisition_name',
                    models.CharField(
                        blank=True,
                        help_text='auto-generated name of the transaction (e.g. Parakey acquired by Facebook)',
                        max_length=255,
                        verbose_name='acquisition name',
                    ),
                ),
                ('acquisition_cb_url', models.URLField(blank=True, verbose_name='acquisition crunchbase URL')),
                ('acquirer_name', models.CharField(blank=True, max_length=255, verbose_name='acquirer name')),
                ('acquirer_cb_url', models.URLField(blank=True, verbose_name='acquirer crunchbase URL')),
                (
                    'acquisition_price',
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='acquisition price (USD)'
                    ),
                ),
                (
                    'acquisition_type',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('acquihire', 'Acquihire'),
                            ('acquisition', 'Acquisition'),
                            ('lbo', 'Leveraged Buyout'),
                            ('management_buyout', 'Management Buyout'),
                            ('merge', 'Merger'),
                        ],
                        max_length=64,
                        verbose_name='acquisition type',
                    ),
                ),
                (
                    'acquisition_terms',
                    models.CharField(
                        blank=True,
                        choices=[('cash', 'Cash'), ('cash_and_stock', 'Cash & Stock'), ('stock', 'Stock')],
                        max_length=64,
                        verbose_name='acquisition terms',
                    ),
                ),
                ('made_acquisitions', models.BooleanField(blank=True, null=True, verbose_name='made acquisitions')),
                (
                    'num_acquisitions',
                    models.PositiveIntegerField(
                        blank=True,
                        help_text='sum of all acquisitions related to the organization',
                        null=True,
                        verbose_name='number of acquisitions',
                    ),
                ),
                (
                    'valuation_range',
                    django.contrib.postgres.fields.ranges.DecimalRangeField(
                        blank=True, null=True, verbose_name='recent valuation range (USD)'
                    ),
                ),
                ('valuation_date', models.DateField(blank=True, null=True, verbose_name='most recent valuation date')),
                (
                    'accelerators_names',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='accelerators names',
                    ),
                ),
                (
                    'cb_rank',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='crunchbase company rank'),
                ),
                (
                    'cb_rank_delta_d7',
                    models.FloatField(blank=True, null=True, verbose_name='crunchbase trend score (7 days)'),
                ),
                (
                    'cb_rank_delta_d30',
                    models.FloatField(blank=True, null=True, verbose_name='crunchbase trend score (30 days)'),
                ),
                (
                    'cb_rank_delta_d90',
                    models.FloatField(blank=True, null=True, verbose_name='crunchbase trend score (90 days)'),
                ),
                (
                    'cb_num_similar_companies',
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name='number of similar companies (crunchbase)'
                    ),
                ),
                (
                    'cb_hub_tags',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name='crunchbase hub tags',
                    ),
                ),
                (
                    'cb_growth_category',
                    models.CharField(blank=True, max_length=64, verbose_name='crunchbase growth category'),
                ),
                (
                    'cb_growth_confidence',
                    models.CharField(blank=True, max_length=64, verbose_name='crunchbase growth confidence'),
                ),
                (
                    'cb_num_articles',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='number of articles (crunchbase)'),
                ),
                (
                    'cb_num_events_appearances',
                    models.PositiveIntegerField(blank=True, null=True, verbose_name='number of events (crunchbase)'),
                ),
                (
                    'web_monthly_visits',
                    models.PositiveBigIntegerField(blank=True, null=True, verbose_name='web monthly visits'),
                ),
                (
                    'web_avg_visits_m6',
                    models.PositiveBigIntegerField(
                        blank=True, null=True, verbose_name='web average monthly visits (6 months)'
                    ),
                ),
                (
                    'web_monthly_visits_growth',
                    models.FloatField(
                        blank=True,
                        help_text='Percent change in total visits to site from previous month. Includes both desktop and mobile web.',
                        null=True,
                        verbose_name='web monthly visits growth',
                    ),
                ),
                (
                    'web_visit_duration',
                    models.FloatField(
                        blank=True,
                        help_text='Average time spent by users on a website, per visit in seconds. Includes both desktop and mobile web.',
                        null=True,
                        verbose_name='web visit duration',
                    ),
                ),
                (
                    'web_visit_duration_growth',
                    models.FloatField(
                        blank=True,
                        help_text='Average time spent by users on a website, per visit in seconds. Includes both desktop and mobile web.',
                        null=True,
                        verbose_name='web visit duration growth',
                    ),
                ),
                (
                    'web_pages_per_visit',
                    models.FloatField(blank=True, null=True, verbose_name='web page views per visit'),
                ),
                (
                    'web_pages_per_visit_growth',
                    models.FloatField(blank=True, null=True, verbose_name='web page views per visit growth'),
                ),
                (
                    'web_bounce_rate',
                    models.FloatField(
                        blank=True,
                        help_text='Percentage of visitors to site who navigate away after viewing only one page.',
                        null=True,
                        verbose_name='web bounce rate',
                    ),
                ),
                (
                    'web_bounce_rate_growth',
                    models.FloatField(blank=True, null=True, verbose_name='web bounce rate growth'),
                ),
                (
                    'web_traffic_rank',
                    models.PositiveIntegerField(
                        blank=True,
                        help_text='Traffic rank of site, as compared to all other sites on the web.',
                        null=True,
                        verbose_name='web global traffic rank',
                    ),
                ),
                (
                    'web_monthly_traffic_rank_change',
                    models.IntegerField(
                        blank=True,
                        help_text='The raw number of rank positions that this site has changed from last month.',
                        null=True,
                        verbose_name='monthly web rank change',
                    ),
                ),
                (
                    'web_monthly_traffic_rank_growth',
                    models.FloatField(
                        blank=True,
                        help_text='Change in traffic rank of site in a given country from previous month.',
                        null=True,
                        verbose_name='monthly web rank growth',
                    ),
                ),
                (
                    'web_tech_count',
                    models.PositiveIntegerField(
                        blank=True,
                        help_text='Number of technologies currently in used by company website. Usually detected by BuiltWith.',
                        null=True,
                        verbose_name='web active tech count',
                    ),
                ),
                (
                    'apps_count',
                    models.PositiveIntegerField(
                        blank=True,
                        help_text='Total number of apps a given publisher has consolidated between itunes and Google Play. Usually detected by Apptopia.',
                        null=True,
                        verbose_name='number of apps',
                    ),
                ),
                (
                    'apps_downloads_count_d30',
                    models.PositiveIntegerField(
                        blank=True,
                        help_text='Total downloads for the previous month for all apps published by this company.',
                        null=True,
                        verbose_name='apps downloads last 30 days',
                    ),
                ),
                (
                    'tech_stack_product_count',
                    models.PositiveIntegerField(
                        blank=True,
                        help_text='Total number of products currently in use by this company. Usually detected by G2 Stack.',
                        null=True,
                        verbose_name='tech stack product count',
                    ),
                ),
                (
                    'it_spending_amount',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text='Usually be detected by Aberdeen.',
                        max_digits=15,
                        null=True,
                        verbose_name='IT spending per year (USD)',
                    ),
                ),
                ('extras', models.JSONField(blank=True, default=dict, verbose_name='extras')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
            },
        ),
    ]
